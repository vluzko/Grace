fn conditional(a: i32, b: i32) -> i32:
    let x = a + b
    if true:
        return a
    else:
        return b

fn add(a: i32, b: i32) -> i32:
    let x = a + b
    return x

fn sub(a: i32, b: i32) -> i32:
    let x = a - b
    return x

fn mult(a: i32, b: i32) -> i32:
    let x = a * b
    return x

fn div(a: f64, b: f64) -> f64:
    let x = a / b
    return x

fn loop(x: i32, y: i32) -> i32:
    while x > y:
        x = x - 1
    return x

fn equality(a: i32, b: i32) -> boolean:
    return a == b

fn neq(a: i32, b: i32) -> boolean:
    return a != b

fn less(a: i32, b: i32) -> boolean:
    return a < b

fn lesse(a: i32, b: i32) -> boolean:
    return a <= b

fn great(a: i32, b: i32) -> boolean:
    return a > b

fn greate(a: i32, b: i32) -> boolean:
    return a >= b

fn call_func(a: i32, b: i32) -> i32:
    return add(a, b)

fn and_test(a: boolean, b: boolean) -> boolean:
    return a and b

fn or_test(a: boolean, b: boolean) -> boolean:
    return a or b

//fn xor_test(a: boolean, b: boolean) -> boolean:
//    return a xor b
