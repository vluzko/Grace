(module
    (import "memory_management" "alloc_words" (func $.memory_management.alloc_words (param $a i32) (result i32)))
    ;; (import "memory_management" "free_chunk" (func $.memory_management.free_chunk (param $a i32) (result i32)))
    ;; (import "memory_management" "copy_many" (func $.memory_management.copy_many (param $a i32) (param $b i32) (param $size i32) (result i32)))
    (import "memory_management" "mem" (memory (;0;) 1))

    (table $tb {} anyfunc)
    (type $generic_binary (func (param $a i32) (param $b i32) (result i32)))
(type $return_i32 (func (result i32)))
    (func $unwrap_i32 (param $ptr i32) (result i32)
        ;; Shift the pointer to point to the data.
        get_local $ptr
        i32.const 4
        i32.add
        ;; Get the raw data
        i32.load
    )

    (func $unwrap_i64 (param $ptr i32) (result i64)
        ;; Shift the pointer to point to the data.
        get_local $ptr
        i32.const 4
        i32.add
        ;; Get the raw data
        i64.load
    )

    (func $unwrap_f32 (param $ptr i32) (result f32)
        ;; Shift the pointer to point to the data.
        get_local $ptr
        i32.const 4
        i32.add
        ;; Get the raw data
        f32.load
    )

    (func $unwrap_f64 (param $ptr i32) (result f64)
        ;; Shift the pointer to point to the data.
        get_local $ptr
        i32.const 4
        i32.add
        ;; Get the raw data
        f64.load
    )

    (func $wrap_i32 (param $val i32) (result i32) (local $ptr i32)
        ;; Allocate data for the gradual object
        i32.const 2
        call $.memory_management.alloc_words
        tee_local $ptr

        ;; Store the type
        i32.const 0
        i32.store

        ;; Store the data
        get_local $ptr
        i32.const 4
        i32.add
        get_local $val
        i32.store

        ;; Return the pointer.
        get_local $ptr
    ) (export "wrap_i32" (func $wrap_i32))

    (func $wrap_i64 (param $val i64) (result i32) (local $ptr i32)
        ;; Allocate data for the gradual object
        i32.const 3
        call $.memory_management.alloc_words
        tee_local $ptr

        ;; Store the type
        i32.const 1
        i32.store

        ;; Store the data
        get_local $ptr
        i32.const 4
        i32.add
        get_local $val
        i64.store

        ;; Return the pointer.
        get_local $ptr
    )

    (func $wrap_f32 (param $val f32) (result i32) (local $ptr i32)
        ;; Allocate data for the gradual object
        i32.const 2
        call $.memory_management.alloc_words
        tee_local $ptr

        ;; Store the type
        i32.const 2
        i32.store

        ;; Store the data
        get_local $ptr
        i32.const 4
        i32.add
        get_local $val
        f32.store

        ;; Return the pointer.
        get_local $ptr
    )

    (func $wrap_f64 (param $val f64) (result i32) (local $ptr i32)
        ;; Allocate data for the gradual object
        i32.const 3
        call $.memory_management.alloc_words
        tee_local $ptr

        ;; Store the type
        i32.const 3
        i32.store

        ;; Store the data
        get_local $ptr
        i32.const 4
        i32.add
        get_local $val
        f64.store

        ;; Return the pointer.
        get_local $ptr
    )

    {}


    {}
    (func (export "callByIndex") (param $i i32) (param $a i32) (param $b i32) (result i32)
        ;; i32.const 12
        ;; i32.const 28
        get_local $i
        get_local $a
        get_local $b

        call_indirect (type $generic_binary)
    )
)
